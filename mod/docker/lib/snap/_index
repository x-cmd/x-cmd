
# xd snap --image alpine --apk yq
___X_CMD_DOCKER_APK_CACHE="$___X_CMD_ROOT_CACHE/alpine/apk/cache"

# use case:
# xd snap jq
# xd snap --pkg nodejs  node
# xd snap --alpine apk/openjdk:java   # xal openjdk:java

# xd snap alpine/apk/openjdk11.3:java
# xd snap s/alpine/apk/openjdk11.3:java
# xd snap apk/openjdk11.3:java

___x_cmd_docker_snap(){
    # LIST='START_OPTS RUN_TOPS name image usecache daemon' arg:local:empty
    local START_OPTS=""
    local RUN_OPTS=""

    local name=""
    local image=""
    local imagetype="alpine"

    local x_=""

    local usecache=1
    local daemon=""

    arg:init docker
    while [ $# -gt 0 ]; do
        case "$1" in
            -h|--help)              ___x_cmd help -m docker snap "$@"; return 0 ;;

            -)                      name=x;             shift 1 ;;
            -n|--name)              name="$2";          arg:2:shift ;;

            --nocache)              usecache="";        shift 1 ;;
            --img|--image)          image="$2";         arg:2:shift ;;      # Or provide a magic, like  xal =jdk
            --imagetype)            imagetype="${2}";   arg:2:shift ;;

            -d|--daemon)            daemon=1;           shift 1 ;;

            -v|--volume)            arg:add START_OPTS "$1"      "$2" ;   arg:2:shift ;;
            -p|--port)              arg:add START_OPTS --port    "$2" ;   arg:2:shift ;;
            --net|--network)        arg:add START_OPTS --network "$2" ;   arg:2:shift ;;

            --dind|--home|--priv|--*=*)
                                    arg:add START_OPTS "$1" ;             shift 1 ;;

            --pwd)                  arg:add START_OPTS  --pwd ;
                                    arg:add RUN_OPTS    --workdir /p ;    shift 1 ;;
            --ws)                   shift 1 ;;

            --user)                 arg:add RUN_OPTS --user "$2" ;        arg:2:shift ;;
            -r|--root)              arg:add RUN_OPTS --user root ;        shift 1 ;;

            --*)                    arg:invalid:ret:64 ;;
            -*)                     image="${___X_CMD_ALPINE_PREFIX}$1"; shift 1 ;;     # Inner use, don't document.

            *)                      break ;;
        esac
    done

    [ -z "$name" ] || ___x_cmd_docker_snap___starswith "$name" "${___X_CMD_ALPINE_PREFIX}-"     || N=docker M="Please provide container name with prefix -> ${___X_CMD_ALPINE_PREFIX}-" log:ret:64
    ! { [ -n "$daemon" ] && [ -z "$name" ]; }                                                   || N=docker M="Please provide container name for daemon -> $daemon" log:ret:64

    local REFIT_PKG="";    local REFIT_SYS="";  local REFIT_CMD="$1";
    ___x_cmd_docker_snap___parse__ "$1"

    if [ -n "$usecache" ]; then
        [ -n "$REFIT_SYS" ] || {    ___x_cmd_docker_snap___defaultpkgsys_ "$imagetype";     REFIT_SYS="$x_";    }
        case "$REFIT_SYS" in
            --apk)          arg:add START_OPTS -v "$___X_CMD_DOCKER_APK_CACHE":/etc/apk/cache ;;
            # --apt)          arg:add START_OPTS -v "$___X_CMD_DOCKER_APK_CACHE":/etc/apk/cache ;;
        esac
    fi

    if [ -z "$image" ]; then
        ___x_cmd_docker_simg_prepare --"$imagetype" "${REFIT_SYS}/${REFIT_PKG}:${REFIT_CMD}"    || return $?;      image="$x_"
    else
        ___x_cmd_docker_snap___starswith "$image" "$___X_CMD_ALPINE_PREFIX-"                    || N=docker M="Image name should be prefixed with '${___X_CMD_ALPINE_PREFIX}-'" log:ret:64
    fi

    ___x_cmd_docker_snap___run "$@"
}

___x_cmd_docker_snap___run(){
    if [ -n "$daemon" ]; then
        ___x_cmd cmdstr RUN_OPTS -d
    else
        [ ! -t 0 ]          || ___x_cmd cmdstr RUN_OPTS --tty
        ___x_cmd cmdstr RUN_OPTS --init -i      # ___x_cmd cmdstr RUN_OPTS --tty
    fi

    if [ -z "$name" ]; then
        ___x_cmd_docker_snap___getname_;    name="$x_"
        ___x_cmd cmdstr RUN_OPTS --rm
        docker:debug    --image "$image"    \
                        "Starting anonymous [container=$name], with auto-remove enabled."
    else
        docker:info     --image "$image"    --FYI-cmd-to-remove-container "docker rm -f $name" \
                        "Named container detected; Container will remain after execution. Auto-removal ( --rm ) is disabled."
    fi

    ___x_cmd_docker_snap___eval         ___x_cmd docker run         "$START_OPTS" --name "${name}"          "$RUN_OPTS" "$image" "\"\$@\""
}

___x_cmd_docker_snap___eval(){
    local IFS=' '
    local cmdstr="$*"
    docker:debug --cmd "$cmdstr" "eval"
    eval "$cmdstr"
}

___x_cmd_docker_snap___parse__(){
    local data="$1"
    case "$data" in
        *:*)
            REFIT_CMD="${data#*:}"
            REFIT_PKG="${data%"$REFIT_CMD"}"
            case "$REFIT_PKG" in
                apk/*|apt/*|dnf/*|go/*|npm/*|cargo/*|pip/*|pixi/*|asdf/*)
                    REFIT_SYS="${REFIT_PKG%%/*}"
                    REFIT_PKG="${REFIT_PKG#*/}"
                    ;;
            esac

            ;;
    esac
}

___x_cmd_docker_snap___getname_(){
    x_="$RANDOM"
    [ -n "$x_" ] || x_="$(___x_cmd rand int 1 30000)"
    x_="xd-$$-$x_"
}

___x_cmd_docker_snap___defaultpkgsys_(){
    local imagetype="$1"
    case "$imagetype" in
        alpine)                 x_=--apk ;;
        debian|ubuntu|kali)     x_=--apt ;;
        fedora)                 x_=--dnf ;;
    esac
}

___x_cmd_docker_snap___starswith(){
    local data="$1"
    local prefix="$2"

    case "$data" in
        "$prefix"*)    ;;
        *)          return 1
    esac
}

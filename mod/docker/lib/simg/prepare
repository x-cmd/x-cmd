

# s/alpine/openjdk11:abc
# s/alpine/openjdk11:abc/_npm/pixiabc/asdf/sadf/asdf/work1/work2/_apk/abc:abc

___x_cmd_docker_simg_prepare(){
    local x_="";
    ___x_cmd_docker_simg_prepare_ "$@" || return $?
    printf "%s\n" "$x_"
}

# xd simg prep --alpine apt:java
# xd simg prep --alpine apt/nodejs:node

# s/alpine/base
# s/alpine/apt/openjdk1.1/
# s/alpine/go:go

___x_cmd_docker_simg_prepare_(){
    local cmd=auto
    local imgtype=alpine

    local mode=""

    arg:init docker
    while [ $# -gt 0 ]; do
        case "$1" in
            -h|--help)              ___x_cmd help -m docker simg prepare_ "$@"; return 0 ;;

            --imagetype)            imgtype="${2}";     arg:2:shift ;;

            --mode)                 mode="${2}";        arg:2:shift ;;
            *)                      break ;;
        esac
    done

    local cmd="$1"

    [ -z "$mode" ] || { ___x_cmd_docker_simg_prepare___"$mode"; return $?;  }

    x_="";  ___x_cmd_docker_simg_prepare___base_ || return $?
    local baseimg="$x_"

    local REFIT_PKG="";    local REFIT_SYS="";  local REFIT_CMD="$cmd";
    ___x_cmd_docker_snap___parse__ "$REFIT_CMD" "$imgtype"

    docker:debug --cmd "$REFIT_CMD" --sys "$REFIT_SYS" --pkg "$REFIT_PKG" "___x_cmd_docker_simg_prepare___refit_"

    ! ___x_cmd_docker cmdinfo hascmd "$baseimg" "$REFIT_CMD" || return 0

    ___x_cmd_docker_simg_prepare___refit_ "$baseimg"
}

___x_cmd_docker_simg_prepare___base_(){
    x_="s/$imgtype/base"
    ! ___x_cmd_docker image exist "$x_"             || return 0

    case "$imgtype" in
        alpine)
            ___x_cmd_docker_simg_download --imagetype alpine        || return $?
            ___x_cmd docker refit               \
                --from alpine                   \
                --to "$x_"                      \
                --userabc                       \
                --apk 'curl fzf jq sqlite bash'
                ;;

        debian|ubuntu)
            ___x_cmd_docker_simg_download --imagetype "$imgtype"    || return $?
            ___x_cmd docker refit               \
                --from "$imgtype"               \
                --to "$x_"                      \
                --userabc                       \
                --apt 'curl fzf jq sqlite3'
                ;;

        kali)
            ___x_cmd_docker_simg_download --imagetype "$imgtype"    || return $?
            ___x_cmd docker refit               \
                --from kalilinux/kali-rolling   \
                --to "$x_"                      \
                --userabc                       \
                --apt 'curl fzf jq sqlite3'
                ;;

        fedora)
            ___x_cmd_docker_simg_download --imagetype "$imgtype" || return $?
            ___x_cmd docker refit               \
                --from fedora                   \
                --to "$x_"                      \
                --userabc                       \
                --dnf 'curl fzf jq sqlite3'
                ;;

        arch)
            ___x_cmd_docker_simg_download --imagetype "$imgtype" || return $?
            ___x_cmd docker refit               \
                --from archlinux --to "$x_"     \
                --userabc                       \
                --pacman 'curl fzf jq sqlite3'
                ;;

    esac
}

___x_cmd_docker_simg_prepare___refit_(){
    local baseimg="$1"

    docker:debug --img "$baseimg" --sys "$REFIT_SYS" --pkg "$REFIT_PKG" "___x_cmd_docker_simg_prepare___refit_"

    ___x_cmd_docker_simg_prepare___imgname_ "$imgtype" "$REFIT_SYS" "$REFIT_PKG"

    ! ___x_cmd_docker image exist "$x_" || {
        docker:debug "Image already created -> $x_"
        return 0
    }

    docker:info "now refitting image -> $x_"

    ___x_cmd docker refit                   \
        --from "$baseimg" --to "$x_"        \
        --userabc                           \
        --"$REFIT_SYS" "$REFIT_PKG"         || return $?
}

___x_cmd_docker_simg_prepare___imgname_(){
    local imgtype="$1"
    local sys="$2"
    local pkg="$3"


    x_="s/$imgtype"

    docker:debug --img "$imgtype" --sys "$sys" --pkg "$pkg" --name "$x_" "Generate image name"

    case "$sys" in
        apt|apk|dnf|pacman)     ;;
        *)                      x_="$x_/$sys" ;;
    esac

    # using -- to seperate pkgs ...
    x_="$x_/$( ___x_cmd_cmds awk -v "n=$pkg" '
        BEGIN{
            gsub("https://", "", n)
            gsub("github.com",      "gh", n)
            gsub("gitlab.com",      "gl", n)
            gsub("codeberg.org",    "cb", n)
            gsub("[=:\\/-@.]", "_", n);
            n = tolower(n);
            print n
        }
    ')"
}

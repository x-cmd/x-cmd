

# s/alpine/openjdk11:abc
# s/alpine/openjdk11:abc/_npm/pixiabc/asdf/sadf/asdf/work1/work2/_apk/abc:abc

___x_cmd_docker_simg_prepare(){
    local x_="";
    ___x_cmd_docker_simg_prepare_ "$@" || return $?
    printf "%s\n" "$x_"
}

# xd simg prep --alpine node:aba
# xd simg prep --alpine apt:java
# xd simg prep --alpine apt/nodejs:node

# s/alpine/base
# s/alpine/apt/openjdk1.1/
# s/alpine/go:go

___x_cmd_docker_simg_prepare_(){
    local cmd=auto
    local imgtype=alpine

    local mode=""

    arg:init docker
    while [ $# -gt 0 ]; do
        case "$1" in
            -h|--help)              ___x_cmd help -m alpine image download "$@"; return 0 ;;

            --alpine|--debian|--fedora|--ubuntu)
                                    imgtype="${1#--}";  shift ;;

            --mode)                 mode="${2}";        arg:2:shift ;;
            *)                      cmd="$1";      break ;;
        esac
        shift
    done

    [ -z "$mode" ] || { ___x_cmd_docker_simg_prepare___"$mode"; return $?;  }

    x_="";  ___x_cmd_docker_simg_prepare___base_

    local REFIT_PKG="";    local REFIT_SYS="";  local REFIT_CMD="$1";
    ___x_cmd_docker_simg_prepare___parse "$cmd"

    ! ___x_cmd_docker cmdinfo hascmd "$x_" "$cmd" || return 0

    ___x_cmd_docker_simg_prepare___refit_
}

___x_cmd_docker_simg_prepare___base_(){
    x_="s/$imgtype/base"
    ! ___x_cmd_docker cmdinfo exist "$x_"       || return 0

    ___x_cmd docker refit                       \
        --from alpine --to "$x_"                \
        --userabc                               \
        --apk 'curl fzf jq sqlite bash'         || return $?
}

___x_cmd_docker_simg_prepare___refit_(){
    ___x_cmd_docker_simg_prepare___imgname_ "$imgtype" "$REFIT_SYS" "$REFIT_PKG";

    ! ___x_cmd docker cmdinfo exist "$x_" || {
        alpine:debug "Image already created -> $x_"
        return 0
    }

    ___x_cmd docker refit                   \
        --from alpine --to "$x_"            \
        --userabc                           \
        --"$REFIT_SYS" "$REFIT_PKG"         || return $?
}

___x_cmd_docker_simg_prepare___parse(){
    local data="$1"
    case "$data" in
        *:*)
            REFIT_CMD="${data#*:}"
            REFIT_PKG="${data%"$REFIT_CMD"}"
            case "$REFIT_PKG" in
                apk/*|apt/*|dnf/*|go/*|npm/*|cargo/*|pip/*|pixi/*|asdf/*)
                    REFIT_SYS="${REFIT_PKG%%/*}"
                    REFIT_PKG="${REFIT_PKG#*/}"
                    ;;
            esac

            ;;
    esac
}

___x_cmd_docker_simg_prepare___imgname_(){
    local imgtype="$1"
    local sys="$2"
    local pkg="$3"

    x_="s/$imgtype"

    case "$sys" in
        apt|apk|dnf|pacman)     ;;
        *)                      x_="$x_/$sys" ;;
    esac

    # using -- to seperate pkgs ...
    x_="$x_/$( ___x_cmd_cmds awk -v "n=$pkg" 'BEGIN{ gsub("[=:/-]", "_", n);  print n; }' )"
}

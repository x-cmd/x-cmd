
# First get all of the information of cmdinfo
# Second all of the information of pkgs

# Could be a image, or a container ...

___x_cmd_docker_cmdinfo(){
    [ $# -gt 0 ]    ||  set -- --help

    local op="$1";  shift
    case "$op" in
        -h|--help)
            ___x_cmd help -m docker cmdinfo
            return 0
            ;;

        create|update|getlist|iscreated|hascmd)
            ___x_cmd_docker_cmdinfo_"$op" "$@"
            ;;

        *)
            N=docker M="Unsupport subcmd -> $op" log:ret:64
            ;;
    esac
}

___x_cmd_docker_cmdinfo_create(){
    ___x_cmd_docker_cmdinfo_iscreated "$@" || return 0
    ___x_cmd_docker_cmdinfo_update "$@"
}

___x_cmd_docker_cmdinfo_update(){
    local image="$1"
    local cmdinfofp="${___X_CMD_ROOT_DATA}/alpine/image/$image/cmdinfo"

    ___x_cmd ensurefp "$cmdinfofp"

    ___x_cmd_docker_cmdinfo_getlist "$image" >"${cmdinfofp}"
}

___x_cmd_docker_cmdinfo_getlist(){
    local image="$1"
    ___x_cmd docker run --entrypoint '' --rm -it "$image" sh -c 'find `echo "$PATH" | tr ":" "\n"` -maxdepth 1 -executable; return 0'
}

___x_cmd_docker_cmdinfo_iscreated(){
    local image="$1"
    local cmdinfofp="${___X_CMD_ROOT_DATA}/alpine/image/$image/cmdinfo"

    [ -f "$cmdinfofp" ]
}

___x_cmd_docker_cmdinfo_hascmd(){
    ___x_cmd_docker_cmdinfo_exist "$@"
}

___x_cmd_docker_cmdinfo_exist(){
    local image="$1"
    local binname="${2:-ls}"

    local cmdinfofp="${___X_CMD_ROOT_DATA}/alpine/image/$image/cmdinfo"

    ___x_cmd_cmds grep -F "$binname" <"$cmdinfofp" 1>/dev/null 2>/dev/null
}

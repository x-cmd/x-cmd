# shellcheck shell=dash disable=2120
# @gemini "summary data [ddgo:x-cmd jq]() and [wiki:x-cmd jq]()"

# @gemini --ddgo "keyword"
# @gemini + ddgo "keyword"
# @gemini + wp "keyword"
# @gemini - wp

xrc:mod:lib     chat        exec/util exec/history  exec/fzf exec/repl

# ___X_CMD_CHAT_CURRENT_ATTCHMENT=
# ___X_CMD_CHAT_CURRENT_SESSION=

___x_cmd_chat___exec(){

    local ___X_CMD_CHAT_CURRENT_ATTCHMENT="$___X_CMD_CHAT_CURRENT_ATTCHMENT"
    local ___X_CMD_CHAT_CURRENT_SESSION="$___X_CMD_CHAT_CURRENT_SESSION"
    local ___X_CMD_CHAT_CURRENT_HISTORY_MAX="$___X_CMD_CHAT_CURRENT_HISTORY_MAX"

    local IFS=" "

    local question=""
    local history=""
    local minion=""
    local session=""
    local model=""
    local system=""
    local type="chat"
    local confirm_before_send=""
    # local question_op=""
    local count_token=""
    local filelist_attach=""
    local provider="gemini"
    local numbered=""
    local temperature=""
    local maxtoken=""
    local history_num=0
    local seed=""

    local inputtype=""
    [ -n "$NO_PIPE_DATA_SIGN_DISPLAY" ] || local inputdesc="This data form pipe"

    local NL="${___X_CMD_UNSEENCHAR_NEWLINE}"
    local reflist=""
    local imagelist=""

    local cache_time=1h
    local is_silent=""
    local modellist=""
    local is_no_empty_question=""

    local x_=""
    while [ $# -gt 0 ]; do
        case "$1" in
            --provider)     provider="$2";
                            [ $# -ge 2 ] || N=chat M="Please provide the provider value" log:ret:64;
                            ___x_cmd_chat_provider___validate "$provider" || return $?
                            shift 2 ;;

            -t|--temperature)
                            temperature="$2"
                            [ $# -ge 2 ] || N=chat M="Please provide the temperature value" log:ret:64;
                            shift 2
                            ;;
            --seed)         seed="$2"
                            [ $# -ge 2 ] || N=chat M="Please provide the seed value" log:ret:64;
                            shift 2
                            ;;
            --maxtoken)     maxtoken="$2"
                            [ $# -ge 2 ] || N=chat M="Please provide the maximum token length for the response" log:ret:64;
                            shift 2
                            ;;

            --jina)         [ $# -ge 2 ] || N=chat M="Please provide the URL value" log:ret:64;
                            x_=; ___x_cmd_chat___exec_jina_ "$2" || return $?
                            reflist="${reflist}${x_}${NL}"
                            shift 2 ;;

            ## DDGO just preserve the top 10 results
            --ddgo)         [ $# -ge 2 ] || N=chat M="Please provide the duckduckgo keyword" log:ret:64;
                            x_=; ___x_cmd_chat___exec_ddgo_ "$2" || return $?
                            reflist="${reflist}${x_}${NL}"
                            shift 2 ;;
            --tldr)         [ $# -ge 2 ] || N=chat M="Please provide the tldr command" log:ret:64;
                            x_=; ___x_cmd_chat___exec_tldr_ "$2" || return $?
                            reflist="${reflist}${x_}${NL}"
                            shift 2 ;;

            # --ddgq)         ;;
            # --wp)           ;; # wikipedia
            # --cht)          ;;

            --kv)           [ $# -ge 3 ] || N=chat M="Please provide the key-value, --kv <key> <value>" log:ret:64
                            x_=; ___x_cmd_chat___exec_kv_ "$2" "$3" || return $?
                            reflist="${reflist}${x_}${NL}"
                            shift 3 ;;
            # --eval "x ls # list all files"
            --eval)
                            [ $# -ge 2 ] || N=chat M="Please provide the command to eval" log:ret:64;
                            chat:info "Eval command -> $2"
                            x_=; ___x_cmd_chat___exec_cmd_ "$2" "Result from execute $2" || return $?
                            reflist="${reflist}${x_}${NL}"
                            shift 2 ;;

            -e)             [ $# -ge 2 ] || N=chat M="Please provide the env name" log:ret:64;
                            x_=; ___x_cmd_chat___exec_env_ "$2" || return $?
                            reflist="${reflist}${x_}${NL}"
                            shift 2 ;;
            -f|--file)
                            [ $# -ge 2 ] || N=chat M="Please provide the filepath" log:ret:64;
                            if ___x_cmd_chat___cache_file_image_to_base64_ "$2"; then
                                imagelist="${imagelist}${x_}${NL}"
                            elif ___x_cmd_chat___exec_file_ "$2" "$numbered"; then
                                reflist="${reflist}${x_}${NL}"
                            else
                                return 1
                            fi
                            shift 2 ;;

            -s|--session)
                            session="$2";
                            [ $# -ge 2 ] || N=chat M="Please provide the session value" log:ret:64; shift 2
                            case "$session" in
                                -|--)
                                    x_=; ___x_cmd_chat___exec_repl___id_previous_ || ___x_cmd_chat___exec_repl___id_previous_app_ || return $?
                                    session="$x_"
                                ;;
                            esac
                            ;;
            --minion)       minion="$2";            [ $# -ge 2 ] || N=chat M="Please provide the minion value"  log:ret:64; shift 2 ;;
            --history|-n)   history_num="$2";       [ $# -ge 2 ] || N=chat M="Please provide the history num"   log:ret:64; shift 2 ;;
            --model)        if [ $# -ge 2 ]; then
                                model="$2"; shift 2; continue
                            elif ___x_cmd_runmode_allow_chatty ; then
                                modellist="$( ___x_cmd_chat_model_ls "$provider" )" || return $?
                                [ -n "$modellist" ] || return $?
                                model="$( ___x_cmd pick --ask "Select the model value" <<A
$modellist
A
)" || return $?
                                shift
                            fi

                            [ -n "$model" ] || N=chat M="Please provide the model value" log:ret:64
                            ;;
            --system)       system="$2";            [ $# -ge 2 ] || N=chat M="Please provide the system value"  log:ret:64; shift 2 ;;
            # --context)
            --type)         type="$2";              [ $# -ge 2 ] || N=chat M="Please provide the type value"    log:ret:64; shift 2 ;;
            --count)        count_token=1 ;         shift 1 ;; # now just gemini kimi

            -c)             confirm_before_send=1;  shift 1 ;;

            # --edit)         inputtype="${1#--}";    shift 1 ;;

            -P|--nopipe)    inputtype=none;         shift 1 ;;      # For script process if inside the pipe
            -p)             inputtype=pipe;
                            inputdesc="$2"
                            [ $# -ge 2 ] || N=chat M="Please provide a description of the value of the input pipe" log:ret:64;
                            shift 2 ;;

            --numbered)     numbered=1;             shift 1 ;;
            --silent)       is_silent=1;            shift 1 ;;

            # deprecated ...
            --question)     question="$2";          [ $# -ge 2 ] || N=chat M="Please provide the question value" log:ret:64;  shift 2 ;;
            --help|-h)
                            case "$provider" in
                                gh) ___x_cmd help -m gh model chat request      ;;
                                *)  ___x_cmd help -m "$provider" chat request   ;;
                            esac
                            return
                            ;;
            --no-empty-question)
                            is_no_empty_question=1; shift 1 ;;
            *)
                            [ "$1" != -- ] || shift
                            if [ -z "$question" ]; then
                                question="$*"
                            else
                                question="${question} $*"
                            fi
                            break
                            ;;
        esac
    done

    [ -n "$inputtype" ] || {
        if [ -t 0 ]; then   inputtype=none
        else                inputtype=pipe
        fi
    }

    case "$inputtype" in
        pipe)
            ___x_cmd_chat___exec_pipe_ "$inputdesc" "$numbered" || return $?
            reflist="${reflist}${x_}${NL}"
            x_=""
            is_no_empty_question=""
            ;;
    esac

    if [ -z "$question" ]; then
        if [ "$is_no_empty_question" = 1 ]; then
            chat:error "Please provide the text you want request"
            return 1
        elif [ -z "${minion}${system}" ]; then
            is_silent=1
            ___x_cmd_chat___exec_repl
            return
        fi
    fi

    # x_=; ___x_cmd_chat_request___preparequestion_ "$question" "$inputtype" "$numbered" "$inputdesc" || return $?
    # question="$x_"
    ___x_cmd_chat___exec_inner_
}

# question reflist imagelist
___x_cmd_chat___exec_inner_(){
    x_=; ___x_cmd str trimm_ "$reflist"
    question="${x_}${question}"

    # TODO: scan the question, extract url.
    # Prompt to ask whether to extract the content from the url using jina

    # @gemini "Please summary the data [ddgo:]"

    local cfg_history_num=; local cfg_session=;     local cfg_minion=;  local cfg_userlang=
    ___x_cmd_chat_cfg --var cfg_history_num=history cfg_session=session cfg_minion=minion cfg_userlang=userlang 2>/dev/null

    [ -n "$minion" ] || minion="default"
    x_=; ___x_cmd_chat_minion_cache_json_ "$minion" || return $?
    local minion_json_cache="$x_"

    local chatid;   chatid="$( ___x_cmd pidid vlseqid ___X_CMD_CHAT_REC )"
    chat:debug --chatid "$chatid" --model "$model" --question "$question" --history_num "$history_num" --confirm_before_send "$confirm_before_send" "chat exec"
    [ -z "$imagelist" ] || {
        case "$provider" in
            openai|gemini|gh|ollama|llmf|moonshot)  ;;
            *)  chat:error "Currently, only [openai|gemini|gh|ollama|llmf|moonshot] support multimodal model, while [provider=$provider] does not support"
                return 1
                ;;
        esac
    }


    (
        if ___x_cmd_is_stdout2tty && ___x_cmd_runmode_allow_chatty; then
            ___x_cmd_chat___exec_inner_raw_ | ___x_cmd md llm --rotate --noless
        else
            ___x_cmd_chat___exec_inner_raw_
        fi
    )

}

___x_cmd_chat___exec_inner_raw_(){
    [ -z "$is_silent" ] || ___x_cmd log "$provider"/warn 2>/dev/null
    case "$provider" in
        gh) ___x_cmd "$provider" model chat exec ;;
        *)  ___x_cmd "$provider" chat exec ;;
    esac
}

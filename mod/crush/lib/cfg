# shellcheck shell=dash disable=SC2034

xrc cfgy
___x_cmd_crush_cfg(){
    [ "$#" -gt 0 ] || {
        ___x_cmd_crush_init
        return
    }

    local op="$1"; shift
    case "$op" in
        -h|--help)      ___x_cmd help -m crush --cfg ;;
        *)              ___x_cmd_crush_cfg___invoke "$op" "$@" ;;
    esac
}

___x_cmd_crush_cur(){
    local X_help_cmd=; X_help_cmd='___x_cmd help -m crush --cur' help:arg:parse
    ___x_cmd_crush_cfg --current "$@"
}

___x_cmd_crush_init(){
    local cur_proxy=

    crush:warn "x crush does not provide API key config; set it via x openai, x gemini, or environment variables."
    if [ -f "$(___x_cmd_crush_cur --get config)" ]; then
        ___x_cmd_crush_cur cur_proxy:=proxy 2>/dev/null
    fi

    ___x_cmd_crush_cfg___invoke --init \
        proxy       "Set up the network proxy for crush"                    \
                    "$cur_proxy" '=~'    "^([a-z0-9]+://)?[0-9.:]+$"        || return $?
}

___X_CMD_CRUSH_CFG_VARLIST="proxy"
___x_cmd_crush_cfg___invoke(){
    ___x_cmd_cfgy_obj                                               \
        --prefix            ___X_CMD_CRUSH_CFG_DATA                \
        --default-config    "${___X_CMD_ROOT_CFG}/crush/X.cfg.yml" \
        --current-config    "${___X_CMD_CRUSH_LOCAL_CONFIG}"       \
        --current-profile   "${___X_CMD_CRUSH_LOCAL_PROFILE}"      \
        --varlist           "$___X_CMD_CRUSH_CFG_VARLIST"          \
        "$@"
}


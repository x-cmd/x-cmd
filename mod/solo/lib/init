# shellcheck shell=dash

##x pip:
##x npm:
##x bun:

___x_cmd_solo___init(){
    local srcfile="$1";     shift
    solo:prepare:path "$srcfile"    || return $?

    local x_=""

    (
        ___x_cmd mkdirp "${wsdp}/.x-cmd"        ||  return $?
        ___x_cmd_cd0 "$wsdp"                    ||  return $?

        solo:info --src "$absfp" "cp to [PWD=$PWD]"
        ___x_cmd_cmds cp "$absfp" ./            ||  return $?

        solo:parse:init
        ___x_cmd_solo___parse_ "$absfp"
        {

            [ -z "$___X_CMD_SOLO_TRYINIT_CODE" ] || {
                printf "%s\n"       "$___X_CMD_SOLO_TRYINIT_CODE"
            }

            printf "%s\n"       '# setup begin' "$x_setup" '# setup end'

            x_="";  ___x_cmd_solo_tryinit___engine_;                x_engine="$x_"
            solo:info "engine is $x_engine"
            x_="";  ___x_cmd_solo_tryinit___code_ "$x_engine";      printf "%s\n" "$x_"

        } >".x-cmd/make"
        ___x_cmd rmrf .x-cmd/make.done

        {
            x_="";  ___x_cmd_solo_tryinit___runcode_  "$x_engine";  printf "%s\n" "$x_"
        } >".x-cmd/run"
    )
}

___x_cmd_solo_tryinit___engine_(){
    x_="$x_engine"
    [ -n "$x_" ] || {
        ___x_cmd_solo___detect_ "$wsfn"
    }
}

___x_cmd_solo_tryinit___code_(){
    local NL="${___X_CMD_UNSEENCHAR_NEWLINE}"
    case "$1" in
        go)
            x_='x go mod init main'
            [ -z "$x_go" ] || x_="${x_}${NL}x go get ${x_go}"
            x_="${x_}${NL}x go get"
            x_="${x_}${NL}x go build \$(___x_cmd wsroot)/${wsfn}"
            ;;

        zig)
            x_='x zig init'
            [ -z "$x_zig" ] || x_="${x_}${NL}zig fetch ${x_zig}"
            x_="${x_}${NL}x zig build-exe \$(___x_cmd wsroot)/${wsfn}"
            ;;

        node)
            x_='x npm init -y'
            [ -z "$x_npm" ] || x_="${x_}${___X_CMD_UNSEENCHAR_NEWLINE}x npm install ${x_npm}"
            ;;

        python)
            if ___x_cmd os is win; then
                x_='x python -m venv . && . ./Scripts/activate'
            else
                x_='x python -m venv . && . ./bin/activate'
            fi
            [ -z "$x_pip" ] || x_="${x_}${___X_CMD_UNSEENCHAR_NEWLINE}x pip install ${x_pip}"
            ;;

        mojo)
            x_='x mojo init -y'
            [ -z "$x_pip" ] || x_="${x_}${___X_CMD_UNSEENCHAR_NEWLINE}x magic add ${x_pip}"
            ;;

        bun)
            x_='x bun init -y'
            [ -z "$x_bun" ] || x_="${x_}${___X_CMD_UNSEENCHAR_NEWLINE}x bun install ${x_bun}"
            ;;

        bun-compile)
            x_='x bun init -y'
            [ -z "$x_bun" ] || x_="${x_}${___X_CMD_UNSEENCHAR_NEWLINE}x bun install ${x_bun}"
            x_="${x_}${NL}x bun build \$(___x_cmd wsroot)/${wsfn} --compile --outfile $wsdp/${wsfn%.*}"
            ;;

        deno-compile)
            [ -z "$x_bun" ] || x_="${x_}${___X_CMD_UNSEENCHAR_NEWLINE}x deno install ${x_bun}"
            x_="${x_}${NL}x deno compile \$(___x_cmd wsroot)/${wsfn}"
            ;;

        deno)
            # Just skip
            ;;

        c)
            x_="x zig cc $wsfp -o $wsdp/${wsfn%.*}"
            ;;
        cpp)
            x_="x zig c++ $wsfp -o $wsdp/${wsfn%.*}"
            ;;
        *)
            solo:warn "No engine found -> $1"
            x_=""
            ;;
    esac
}

___x_cmd_solo_tryinit___runcode_(){
    local NL="${___X_CMD_UNSEENCHAR_NEWLINE}"
    case "$1" in
        go|zig|c|cpp|bun-compile|deno-compile)
            if ___x_cmd os is win; then
                x_="$wsdp/${wsfn%"."*}.exe \"\$@\""
            else
                x_="$wsdp/${wsfn%"."*} \"\$@\""
            fi
            ;;
        pip|deno|ruby|perl|julia|elisp|bun)
            x_="x $1 $wsdp/$wsfn \"\$@\""
            ;;
        python)
            if ___x_cmd os is win; then
                x_=". $wsdp/Scripts/activate"
            else
                x_=". $wsdp/bin/activate"
            fi
            x_="${x_}${___X_CMD_UNSEENCHAR_NEWLINE}x $1 $wsdp/$wsfn \"\$@\""
            x_="${x_}${___X_CMD_UNSEENCHAR_NEWLINE}deactivate"
            ;;
        *)
            x_="x $1 $wsdp/$wsfn \"\$@\""
            ;;
    esac
}

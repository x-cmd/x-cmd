# shellcheck shell=dash

___x_cmd_hub_token(){
    local op="$1"
    case "$op" in
        -h|--help) shift ; ___x_cmd_hub___help token ; return 1 ;;
        info|ls|rm|clear|gen) shift
            "___x_cmd_hub_token_$op" "$@"                         ;;
        "") ___x_cmd_hub_u_get_token "$@"                    ;;
        *)  ___x_cmd_hub___help token ; return 1 ;;
    esac
}

___x_cmd_hub_token_info(){
    local json=
    case "$1" in
        --json|-j)    json=true; shift ;;
        --help|-h)    ___x_cmd_hub___help token info; return ;;
    esac

    local token; token="$(___x_cmd_hub_u_get_token)" || return
    local resp=
    resp="$(___x_cmd_hub_u_curl get "/api/v0/token/$token")" || {
        ___x_cmd_hub_u_handle_resp false "Failed to get token info:"
        return 1
    }
    [ -z "$json" ] || { printf "%s\n" "$resp" ; return 0 ; }
    ___x_cmd_hub_u_handle_resp true "Get token info successfully"
    printf "[%s]" "$resp" | ___x_cmd yml j2y | ___x_cmd str ml pwrap '  '
}

___x_cmd_hub_token_ls(){
    local json=
    case "$1" in
        --json|-j)    json=true; shift ;;
        --help|-h)    ___x_cmd_hub___help token ls ; return 1 ;;
    esac

    local resp=
    resp="$(___x_cmd_hub_u_curl get /api/v0/token)" || {
        ___x_cmd_hub_u_handle_resp false "Failed to list tokens:"
        return 1
    }
    [ -z "$json" ] || { printf "%s\n" "$resp" ; return 0 ; }
    ___x_cmd_hub_u_handle_resp true "List tokens successfully"
    printf "%s" "$resp" | ___x_cmd yml j2y | ___x_cmd str ml pwrap '  '
}

___x_cmd_hub_token_rm(){
    local json=
    case "$1" in
        --json|-j)    json=true; shift ;;
        --help|-h)    ___x_cmd_hub___help token rm ; return 1 ;;
    esac

    local token="$1"
    [ -n "$token" ] || M='Provide token' N=hub log:ret:64
    local resp=
    resp="$(___x_cmd_hub_u_curl delete "/api/v0/token/$token")" || {
        ___x_cmd_hub_u_handle_resp false "Failed to remove token:"
        return 1
    }
    ___x_cmd_hub_u_handle_resp true "Remove token successfully"
}

___x_cmd_hub_token_clear(){
    local resp=
    resp="$(___x_cmd_hub_u_curl get /api/v0/token/invalid/other)" || {
        ___x_cmd_hub_u_handle_resp false "Failed to clear token:"
        return 1
    }
    ___x_cmd_hub_u_handle_resp true "Clear token successfully:"
}

___x_cmd_hub_token_gen(){
    local json=; local body="" ; local prefix=; local acl=
    while [ $# -gt 0 ]; do
        case "$1" in
            --json|-j)    json=true; shift ;;
            --help|-h)    ___x_cmd_hub___help token gen ; return 1 ;;
            --policy|-p)  shift ;
                prefix="$1"; shift
                acl="$1"   ; shift
                [ -n "$prefix"  ] || M='Provide prefix' N=hub log:ret:64
                [ -n "$acl"     ] || M='Provide acl'    N=hub log:ret:64
                body="$body,{\"prefix\":\"/${prefix#/}\", \"acl\":\"$acl\"}"
                ;;
            *)            break ;;
        esac
    done

    hub:debug "body=>$body"

    local resp=
    local acl_list="[${body#,}]"
    resp="$(___x_cmd_hub_u_curl post /api/v0/token acl_list )" || {
        ___x_cmd_hub_u_handle_resp false "Failed to generate token:"
        return 1
    }
    [ -z "$json" ] || { printf "%s" "$resp" ; return 0 ; }
    ___x_cmd_hub_u_handle_resp true "Generate token successfully"
    printf "[%s]" "$resp" | ___x_cmd yml j2y | ___x_cmd str ml pwrap '  '
}

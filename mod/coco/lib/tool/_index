
# ,,
# ,

# The coco tools

xrc:mod:lib     coco        \
    tool/enactall   tool/bfind   tool/findgrep   tool/mcp   tool/readfile   tool/writefile  tool/shcmd

___x_cmd_coco_tool(){
    [ $# -gt 0 ]    ||  set -- --help

    local op="$1";      shift

    case "$op" in
        -h|--help)      ___x_cmd help -m coco tool "$@" ;   shift ;;
        grep)           ;;
        readfile|readmanyfile)

                        ;;

        writefile|v4a)

                        ;;
    esac

}

___x_cmd_coco_tool___enactcmd(){
    local folder="$1"
    local fcidx="$2"
    local name="$3"
    local args="$4"

    local fcall_dir="$folder/function-call/$fcidx"

    local cmdarg=""
    local arg_desc=""
    local parsejson; parsejson="$( ___x_cmd_coco___parse_json_args_ "$args" )"
    [ -z "$parsejson" ] || eval "$parsejson"

    coco:info ${arg_desc:+"--desc"} ${arg_desc:+"$arg_desc"} \
        "Function calling -> x coco $name $cmdarg"

    eval "___x_cmd_coco_${name}" "$cmdarg" \
        1>"$fcall_dir/stdout" 2>"$fcall_dir/stderr"
    printf "%s\n" "$?" >"$fcall_dir/errcode"
    printf "[FUNCTION-CALL-END] %s\n" "$fcidx" >>"$folder/log"
}

# json to file ... => cmdarg, arg_desc, arg_folder, arg_keyword ...
___x_cmd_coco___parse_json_args_(){
    local json="$1"
    [ -n "$json" ] || return 1
    format="$format" \
    ___x_cmd cawk -m j/json,j/jiter,sh \
        -f "$___X_CMD_ROOT_MOD/coco/lib/awk/parse_json_args.awk" <<A
$json
A
}
